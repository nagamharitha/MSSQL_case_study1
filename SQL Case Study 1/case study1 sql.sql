--1. Display the number of states present in the LocationTable.
select * from Location
select distinct count(state) as count_of_states from Location
--2. How many products are of regular type?
select count(product) as no_of_regular from Product where type='Regular'

--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) as Total_marketing from fact where productId=1

--4. What is the minimum sales of a product?
select min(sales) as maximum_sales from fact

--5. Display the max Cost of Good Sold (COGS).
select min(COGS) as maximum_cost from fact

--6. Display the details of the product where product type is coffee.
select * from product where Product_type='coffee'

--7. Display the details where total expenses are greater than 40.
select * from fact where Total_Expenses>40 order by Total_Expenses

--8. What is the average sales in area code 719?
select avg(sales) as average_sales from fact where Area_Code=719

--9. Find out the total profit generated by Colorado state.
select sum(profit) as colorado_profit from Fact F
inner join
Location L
on F.Area_code=L.Area_Code
where state='colorado'

--10. Display the average inventory for each product ID. 
select avg(inventory) as average_inventory from fact group by productId order by ProductId

--11. Display state in a sequential order in a Location Table. 
select distinct state from location order by state desc
select distinct state from location order by state 

--12. Display the average budget of the Product where the average budget margin should be greater than 100. 
select avg(budget_margin) as average_budget, Productid from fact group by ProductId having  avg(budget_margin)>100

--13. What is the total sales done on date 2010-01-01?
select sum(sales) as Total_sales from fact where date='2010-01-01'
--14. Display the average total expense of each product ID on an individual date.
select avg(total_expenses) as average_total_expense,productid,date from fact group by ProductId, date order by ProductId
--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select date,fact.ProductId,Product_type,Product,sales,profit,state,location.Area_code
from fact
inner join
Location
on fact.area_code=location.area_code
inner join 
Product
on Product.ProductId=fact.ProductId
--16. Display the rank without any gap to show the sales wise rank. 
select productid,sales,profit,DENSE_RANK() over (order by sales desc) as sales_rank from fact

--17. Find the state wise profit and sales. 
select state,sum(F.Profit) as profit,sum(F.Sales) as sales from fact F,Location L
where F.Area_Code=l.Area_Code group by L.State

select state,sum(F.Profit),sum(f.Sales) from fact f inner join location l on	f.Area_Code=l.Area_Code 	group by l.State

--18. Find the state wise profit and sales along with the productname. 
SELECT [State], [Product],  SUM([Profit]) AS [Profit], SUM([Sales]) AS [Sales] FROM [dbo].[Product] AS [P] INNER JOIN [dbo].[fact] AS [F] ON [P].[ProductId] = [F].[ProductId]INNER JOIN [dbo].[Location] AS [L] ON [F].[Area_Code] = [L].[Area_Code]GROUP BY [State],[Product]ORDER BY [State]

--19. If there is an increase in sales of 5%, calculate the increasedsales. 
select sales, (sales * 1.05) as increased_sales from fact

--20. Find the maximum profit along with the product ID and producttype
SELECT [P].[ProductId], [Product_Type], MAX([Profit]) as [maximum profit] FROM [dbo].[fact] AS [L]INNER JOIN [dbo].[Product] AS [P] ON [L].[ProductId] =  [P].[ProductId]GROUP BY [P].[ProductId],[Product_Type]ORDER BY [ProductId]

--21. Create a stored procedure to fetch the result according to the product type from Product Table. 
CREATE PROCEDURE type_of_the_product
    @Menu VARCHAR(60)
AS
    SELECT * FROM Product
    WHERE Product_Type = @Menu;

EXEC type_of_the_product 'Herbal Tea'; 

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select * from fact
alter table fact add check_profit varchar(20)
update fact set check_profit='PROFIT' where Total_Expenses < 60
update fact set check_profit='LOSS' where Total_Expenses>60


--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 
select date,productid,
sum(sales) as total_sales from fact
group by date,productid with rollup

--24. Apply union and intersection operator on the tables which consist of attribute area code. 
select area_code from fact
union
select Area_Code from Location

select area_code from fact
intersect
select area_code from Location
--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
CREATE FUNCTION GetProductsByTypeUDF
(
    @ProductType VARCHAR(255)
)
RETURNS TABLE
AS
RETURN
(
    SELECT *
    FROM Product
    WHERE Product_Type = @ProductType
);
SELECT * FROM GetProductsByTypeUDF('Electronics');
--26. Change the product type from coffee to tea where product ID is 1 and undo it. 
begin transaction
update Product set Product_Type='Tea' where ProductId=1
commit transaction
begin transaction
update Product set Product_Type='Coffee' where ProductId=1
commit transaction

--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
select date,Productid,sales,total_expenses from fact where Total_Expenses between 100 and 200
--28. Delete the records in the Product Table for regular type. 
select * from Product
delete Product where type='Regular'
--29. Display the ASCII value of the fifth character from the columnProduct
select Product,ASCII(substring(product,5,1))as ascii_of_fifth_character from Product